###########################
# Political Events
###########################
# By Kallar, Nijato, Sir Rogers and Zankoas
###########################

add_namespace = fr.political

###########################
# Popularity Events
###########################
country_event = {
	id = fr.political.1
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.1"}

	hidden = yes
	fire_only_once = yes 
	mean_time_to_happen = {
		days = 40	#prevent spam, this shit slows down the game if triggered every day
	}
	trigger = {
		NOT = { has_country_flag = unpopular_government }
		OR = {
			NOT = {
				has_idea = party_pop_0_90
				has_idea = party_pop_0_80
				has_idea = party_pop_0_70
				has_idea = party_pop_0_60
				has_idea = party_pop_0_50
				has_idea = party_pop_0_40
				has_idea = party_pop_0_30
				has_idea = party_pop_0_20
				has_idea = party_pop_0_10
				has_idea = party_pop_0_00
			}
			AND = {
				has_idea = party_pop_0_90
				check_variable = { var = ROOT.NS_ruling_party_pop value = 90 compare = less_than }
			}
			AND = {
				has_idea = party_pop_0_80
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 90 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 80 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_70
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 80 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 70 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_60
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 70 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 60 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_50
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 60 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 50 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_40
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 50 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 40 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_30
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 40 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 30 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_20
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 30 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 20 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_10
				OR = {
					check_variable = { var = ROOT.NS_ruling_party_pop value = 20 compare = greater_than_or_equals }
					check_variable = { var = ROOT.NS_ruling_party_pop value = 10 compare = less_than }
				}
			}
			AND = {
				has_idea = party_pop_0_00
				check_variable = { var = ROOT.NS_ruling_party_pop value = 10 compare = greater_than_or_equals }
			}
		}
	}

	immediate = {
		remove_ideas = party_pop_0_90
		remove_ideas = party_pop_0_80
		remove_ideas = party_pop_0_70
		remove_ideas = party_pop_0_60
		remove_ideas = party_pop_0_50
		remove_ideas = party_pop_0_40
		remove_ideas = party_pop_0_30
		remove_ideas = party_pop_0_20
		remove_ideas = party_pop_0_10
		remove_ideas = party_pop_0_00

		if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 90 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_90
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 80 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_80
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 70 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_70
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 60 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_60
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 50 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_50
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 40 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_40
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 30 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_30
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 20 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_20
		}
		else_if = {
			limit = {
				check_variable = { var = ROOT.NS_ruling_party_pop value = 10 compare = greater_than_or_equals }
			}
			add_ideas = party_pop_0_10
		}
		else = {
			add_ideas = party_pop_0_00
		}
	}
	
	option = {}
}

country_event = {
	id = fr.political.2
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.2"}
    hidden = yes
    fire_only_once = yes 
	mean_time_to_happen = {
		days = 20	#prevent spam, this shit slows down the game if triggered every day
	}
    option = { name = OK }
}

country_event = {
	id = fr.political.27
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.27"}
	title = fr.political.27.t
	desc = fr.political.27.d
	picture = GFX_petain_NFA

	is_triggered_only = yes

	option = {
		name = fr.political.27.a
		add_political_power = -5
		country_event = { id = fr.political.28 }
	}

}


### Remove independent war
country_event = {
	id = fr.political.30
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.30"}
	title = fr.political.30.t
	desc = fr.political.30.d

	trigger = {
		has_idea = independent_war
		has_war = no
	}

	mean_time_to_happen = {
		days = 5
	}

	option = {
		name = fr.political.30.a
		remove_ideas = independent_war
	}

}


### Setting up Opinion Modifiers at Gamestart ###
country_event = {
	id = fr.political.40
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.40"}
	title = fr.political.40.t
	desc = fr.political.40.d
	
	hidden = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_socialist_government = yes
			}
			every_country = {
				limit = {
					has_socialist_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_democratic_government = yes
						has_dictatorship_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		if = {
			limit = {
				has_democratic_government = yes
			}
			every_country = {
				limit = {
					has_democratic_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_socialist_government = yes
						has_dictatorship_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		if = {
			limit = {
				has_dictatorship_government = yes
			}
			every_country = {
				limit = {
					has_dictatorship_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_democratic_government = yes
						has_socialist_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		every_country = {
			limit = {
				has_same_government_as_ROOT = yes
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = FR_same_ideology
			}
		}
		if = {
			limit = {
				has_government = vanguardist
			}
			set_country_flag = opinion_set_vanguardist
		}
		if = {
			limit = {
				has_government = collectivist
			}
			set_country_flag = opinion_set_collectivist
		}
		if = {
			limit = {
				has_government = fasci
			}
			set_country_flag = opinion_set_fasci
		}
		if = {
			limit = {
				has_government = social_democrat
			}
			set_country_flag = opinion_set_social_democrat
		}
		if = {
			limit = {
				has_government = liberal
			}
			set_country_flag = opinion_set_liberal
		}
		if = {
			limit = {
				has_government = illuminist
			}
			set_country_flag = opinion_set_illuminist
		}
		if = {
			limit = {
				has_government = social_conservative
			}
			set_country_flag = opinion_set_social_conservative
		}
		if = {
			limit = {
				has_government = paternal
			}
			set_country_flag = opinion_set_paternal
		}
		if = {
			limit = {
				has_government = futurist
			}
			set_country_flag = opinion_set_futurist
		}
		if = {
			limit = {
				has_government = despotist
			}
			set_country_flag = opinion_set_despotist
		}
		if = {
			limit = {
				has_government = revivalist
			}
			set_country_flag = opinion_set_revivalist
		}
	}
	
	option = {
		name = fr.political.40.a
	}

}

### Setting up Opinion Modifiers on Government Change ###
country_event = {
	id = fr.political.41
	immediate = {log = "[GetDateText]: [Root.GetName]: event fr.political.41"}
	title = fr.political.40.t
	desc = fr.political.40.d
	
	hidden = yes

	trigger = {
		OR = {
			AND = {
				NOT = { has_government = vanguardist }
				has_country_flag = opinion_set_vanguardist
			}
			AND = {
				NOT = { has_government = collectivist }
				has_country_flag = opinion_set_collectivist
			}
			AND = {
				NOT = { has_government = fasci }
				has_country_flag = opinion_set_fasci
			}
			AND = {
				NOT = { has_government = social_democrat }
				has_country_flag = opinion_set_social_democrat
			}
			AND = {
				NOT = { has_government = liberal }
				has_country_flag = opinion_set_liberal
			}
			AND = {
				NOT = { has_government = illuminist }
				has_country_flag = opinion_set_illuminist
			}
			AND = {
				NOT = { has_government = social_conservative }
				has_country_flag = opinion_set_social_conservative
			}
			AND = {
				NOT = { has_government = paternal }
				has_country_flag = opinion_set_paternal
			}
			AND = {
				NOT = { has_government = futurist }
				has_country_flag = opinion_set_futurist
			}
			AND = {
				NOT = { has_government = despotist }
				has_country_flag = opinion_set_despotist
			}
			AND = {
				NOT = { has_government = revivalist }
				has_country_flag = opinion_set_revivalist
			}
			AND = {
				NOT = { has_country_flag = opinion_set_vanguardist }
				NOT = { has_country_flag = opinion_set_collectivist }
				NOT = { has_country_flag = opinion_set_fasci }
				NOT = { has_country_flag = opinion_set_social_democrat }
				NOT = { has_country_flag = opinion_set_liberal }
				NOT = { has_country_flag = opinion_set_illuminist }
				NOT = { has_country_flag = opinion_set_social_conservative }
				NOT = { has_country_flag = opinion_set_paternal }
				NOT = { has_country_flag = opinion_set_futurist }
				NOT = { has_country_flag = opinion_set_despotist }
				NOT = { has_country_flag = opinion_set_revivalist }
			}
		}
	}

	mean_time_to_happen = {
		days = 2
	}

	immediate = {
		clr_country_flag = opinion_set_vanguardist
		clr_country_flag = opinion_set_collectivist
		clr_country_flag = opinion_set_fasci
		clr_country_flag = opinion_set_social_democrat
		clr_country_flag = opinion_set_liberal
		clr_country_flag = opinion_set_illuminist
		clr_country_flag = opinion_set_social_conservative
		clr_country_flag = opinion_set_paternal
		clr_country_flag = opinion_set_futurist
		clr_country_flag = opinion_set_despotist
		clr_country_flag = opinion_set_revivalist
		every_country = {
			remove_opinion_modifier = {
				target = ROOT
				modifier = FR_similar_ideology
			}
			ROOT = {
			remove_opinion_modifier = {
				target = PREV
				modifier = FR_similar_ideology
			}
			}
			remove_opinion_modifier = {
				target = ROOT
				modifier = FR_different_ideology
			}
			ROOT = {
			remove_opinion_modifier = {
				target = PREV
				modifier = FR_different_ideology
			}
			}
			remove_opinion_modifier = {
				target = ROOT
				modifier = FR_same_ideology
			}
			ROOT = {
			remove_opinion_modifier = {
				target = PREV
				modifier = FR_same_ideology
			}
			}
		}
		if = {
			limit = {
				has_socialist_government = yes
			}
			every_country = {
				limit = {
					has_socialist_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_democratic_government = yes
						has_dictatorship_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		if = {
			limit = {
				has_democratic_government = yes
			}
			every_country = {
				limit = {
					has_democratic_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_socialist_government = yes
						has_dictatorship_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		if = {
			limit = {
				has_dictatorship_government = yes
			}
			every_country = {
				limit = {
					has_dictatorship_government = yes
					NOT = { has_same_government_as_ROOT = yes }
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_similar_ideology
				}
			}
			every_country = {
				limit = {
					OR = {
						has_democratic_government = yes
						has_socialist_government = yes
					}
				}
				add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
				reverse_add_opinion_modifier = {
					target = ROOT
					modifier = FR_different_ideology
				}
			}
		}
		every_country = {
			limit = {
				has_same_government_as_ROOT = yes
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = FR_same_ideology
			}
			reverse_add_opinion_modifier = {
				target = ROOT
				modifier = FR_same_ideology
			}
		}
		if = {
			limit = {
				has_government = vanguardist
			}
			set_country_flag = opinion_set_vanguardist
		}
		if = {
			limit = {
				has_government = collectivist
			}
			set_country_flag = opinion_set_collectivist
		}
		if = {
			limit = {
				has_government = fasci
			}
			set_country_flag = opinion_set_fasci
		}
		if = {
			limit = {
				has_government = social_democrat
			}
			set_country_flag = opinion_set_social_democrat
		}
		if = {
			limit = {
				has_government = liberal
			}
			set_country_flag = opinion_set_liberal
		}
		if = {
			limit = {
				has_government = illuminist
			}
			set_country_flag = opinion_set_illuminist
		}
		if = {
			limit = {
				has_government = social_conservative
			}
			set_country_flag = opinion_set_social_conservative
		}
		if = {
			limit = {
				has_government = paternal
			}
			set_country_flag = opinion_set_paternal
		}
		if = {
			limit = {
				has_government = futurist
			}
			set_country_flag = opinion_set_futurist
		}
		if = {
			limit = {
				has_government = despotist
			}
			set_country_flag = opinion_set_despotist
		}
		if = {
			limit = {
				has_government = revivalist
			}
			set_country_flag = opinion_set_revivalist
		}
	}
	
	
	option = {
		name = fr.political.40.a
	}

}

# Calculate sent expeditionary force variables
country_event = {
	id = fr.political.210
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.210" }

	hidden = yes
	is_triggered_only = yes

	option = {
		set_variable = { expeditionary_division_sent = 0 }
		for_each_scope_loop = {
			array = faction_members
			if = {
				limit = {
					received_expeditionary_forces = { sender = ROOT value > 0 }
				}
				while_loop_effect = {
					limit = {
						received_expeditionary_forces = { sender = ROOT value > expeditionary_division_sent }
					}
					add_to_variable = { expeditionary_division_sent = 1 }
				}
			}
		}
		calculate_actual_division_number = yes
	}
}

# Calculate received expeditionary force variables
country_event = {
	id = fr.political.211
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.211" }

	hidden = yes
	is_triggered_only = yes

	option = {
		set_variable = { num_expeditionary_divisions_received = 0 }
		for_each_loop = {
			array = faction_members
			if = {
				limit = {
					received_expeditionary_forces = { sender = var:v value > 0 }
				}
				set_temp_variable = { expeditionary_division_received_temp = 0 }
				while_loop_effect = {
					limit = {
						received_expeditionary_forces = { sender = var:v value > expeditionary_division_received_temp }
					}
					add_to_temp_variable = { expeditionary_division_received_temp = 1 }
				}
				add_to_variable = { num_expeditionary_divisions_received = expeditionary_division_received_temp }
			}
		}
		calculate_actual_division_number = yes
	}
}

# Repeated check for whether an AI country should reduce its number of units
country_event = {
	id = fr.political.121
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.121" }

	hidden = yes
	is_triggered_only = yes

	option = {
		calculate_maximum_divisions = yes
		if = {
			limit = {
				is_ai = yes
				has_war = no
				num_divisions > 4
				OR = {
					has_excessive_army_size = yes
					needs_army_reduction_for_manpower = yes
					AND = {
						has_reached_maximum_divisions = yes
						NOT = { has_global_flag = KR_no_unit_limits }
					}
				}
				NOT = {
					any_other_country = {
						OR = {
							is_justifying_wargoal_against = ROOT
							has_wargoal_against = ROOT
							ROOT = { is_justifying_wargoal_against = PREV }
							ROOT = { has_wargoal_against = PREV }
						}
					}
				}
			}
			disband_twenty_percent_units = yes
			country_event = { id = fr.political.121 days = 7 random = 72 }
		}
		else = {
			clr_country_flag = has_reduce_units_check
		}
	}
}

# Check whether a player should have mobilisation penalties
country_event = {
	id = fr.political.122
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.122" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_reached_maximum_divisions = yes
		NOT = {
			has_global_flag = KR_unit_limits_ai_only
			has_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		}
	}

	option = {
		calculate_mobilisation_penalty = yes
		add_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		country_event = { id = fr.political.123 days = 7 }
	}
}

# Check whether a player should still have mobilisation penalties
country_event = {
	id = fr.political.123
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.123" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
	}

	immediate = {
		country_event = { id = fr.political.123 days = 7 }
	}

	option = {
		if = {
			limit = {
				OR = {
					is_ai = yes
					has_reached_maximum_divisions = no
				}
			}
			clear_variable = mobilisation_penalty_var
			clear_variable = mobilisation_penalty_var_positive
			remove_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		}
		else = {
			calculate_maximum_divisions = yes
			calculate_mobilisation_penalty = yes
		}
	}
}

##################################
###	State Transfer Events   ###
##################################

# Puppeting
country_event = {
	id = fr.political.250
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.250 FROM = [From.GetName]" }
	title = fr.political.250.t
	desc = fr.political.250.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a #Regular Puppet
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:to_be_overlord = { puppet = event_target:marked_country }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.b #Keep Old Government
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:marked_country = { get_current_government_type = yes }
		event_target:to_be_overlord = { puppet = event_target:marked_country }
		custom_effect_tooltip = puppet_but_keep_government_tt
		event_target:marked_country = { restore_previous_government_type = yes }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
		clear_global_event_target = to_be_overlord
	}
}

# Free Puppet
country_event = {
	id = fr.political.251
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.251 FROM = [From.GetName]" }
	title = fr.political.251.t
	desc = fr.political.251.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			overlord = {
				set_autonomy = {
					target = event_target:marked_country
					autonomy_state = autonomy_free
				}
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
	}
}

# Add to Faction
country_event = {
	id = fr.political.252
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.252 FROM = [From.GetName]" }
	title = fr.political.252.t
	desc = fr.political.252.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:to_be_faction_leader = {
			faction_leader = {
				add_to_faction = event_target:marked_country
			}
		}
		clear_global_event_target = to_be_faction_leader
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
		clear_global_event_target = to_be_faction_leader
	}
}

# Make Faction Leader
country_event = {
	id = fr.political.253
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.253 FROM = [From.GetName]" }
	title = fr.political.253.t
	desc = fr.political.253.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			set_faction_leader = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
	}
}

# Leave Faction
country_event = {
	id = fr.political.254
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.254 FROM = [From.GetName]" }
	title = fr.political.254.t
	desc = fr.political.254.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
	}
}

# Peace
country_event = {
	id = fr.political.255
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.255 FROM = [From.GetName]" }
	title = fr.political.255.t
	desc = fr.political.255.d

	is_triggered_only = yes

	immediate = {
		hidden_effect = {
			event_target:marked_country = { save_event_target_as = white_peace_receiver }
		}
	}

	option = {
		name = fr.political.250.a
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		name = fr.political.255.b
		trigger = {
			event_target:marked_country = {
				OR = {
					is_subject = yes
					is_in_faction = yes
				}
			}
		}
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		name = fr.political.250.c
		clear_global_event_target = peace_target
	}
}

# Peace Out Everyone
country_event = {
	id = fr.political.256
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.256 FROM = [From.GetName]" }
	title = fr.political.256.t
	desc = fr.political.256.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
			separate_peace_all_wars = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
	}
}

# Declare War
country_event = {
	id = fr.political.257
	immediate = { log = "[GetDateText]: [Root.GetName]: event fr.political.257 FROM = [From.GetName]" }
	title = fr.political.257.t
	desc = fr.political.257.d

	is_triggered_only = yes

	option = {
		name = fr.political.250.a
		event_target:marked_country = {
			declare_war_on = {
				target = event_target:war_target
				type = annex_everything
			}
			hidden_effect = {
				every_country = {
					limit = {
						is_ally_with = event_target:marked_country
						NOT = {
							tag = event_target:marked_country
							has_war_with = event_target:war_target
						}
					}
					meta_effect = {
						text = {
							add_to_war = {
								targeted_alliance = [ALLY]
								enemy = [ENEMY]
							}
						}
						ALLY = "[marked_country.GetTag]"
						ENEMY = "[war_target.GetTag]"
					}
				}
			}
		}
		clear_global_event_target = war_target
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fr.political.250.c
		clear_global_event_target = war_target
	}
}