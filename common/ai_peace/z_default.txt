# Temp variables
# Old actions will be stored as temp variables
# For Winners:
#	taken_states@TAG: an array where each element contains the state that is taken by country TAG
#	taken_by@STATE_ID: is set to country that took the state
# For Losers:
# 	current_states@TAG: Remaining states of loser
# For each subject action:
#   subject_states@TAG : an array where each element contains the state that is subjected by country TAG
#   subject_countries@TAG : an array where each element contains the country that is subjected by country TAG
#   subjected_by@STATE_ID : a variable for each state that is subjected by a country, value is overlord
#   subjected_by@TAG : an array for each loser that is subjected, array contains overlord
# For each liberated:
#   liberate_states@TAG : an array where each element contains the state that is liberated by country TAG
#   liberate_countries@TAG : an array where each element contains the country that is liberated by country TAG
# A trigger named "build_temp_vars" will be called before any evaluation so further temp variables can be calculated

default_peace = {
	enable = {
		always = yes
	}

	annex_randomness = 0 #350
	liberate_randomness = 0 #100
	puppet_randomness = 0 #200
	take_states_randomness = 0 #150
	force_government_randomness = 0 #50

	# ROOT = Taker, FROM = Giver
	annex = {
		factor = 500
	}

	# ROOT = Taker, FROM = Liberated
	liberate = {
		factor = 0 #100
	}

	# ROOT = Taker, FROM = Giver
	puppet = {
		factor = 0 #200
	}
	
	# ROOT = Taker, FROM = Giver
	puppet_all = {
		base = 0
	}

	# ROOT = Taker, FROM = Giver
	puppet_state = {
		base = 0
	}

	# ROOT = Taker, FROM = State
	take_states = {
		factor = 50

		# prioritize cores, claims, and ambition areas
		modifier = {
			factor = 20
			FROM = { is_core_of = ROOT }
		}
		modifier = {
			factor = 10
			FROM = {
				NOT = { is_core_of = ROOT }
				is_claimed_by = ROOT
			}
		}
		modifier = {
			factor = 2
			FROM = {
				is_claim_or_core_of_ROOT = no
				is_ambition_area_of_ROOT = yes
			}
		}
		modifier = {
			factor = 0.1
			FROM = {
				is_claim_or_core_of_ROOT = no
				is_ambition_area_of_ROOT = no
			}
		}

		# prioritize important states
		modifier = {
			factor = 10
			FROM = { is_important_state = yes }
		}

		# prioritize neighboring states
		# modifier = {
			# factor = 0.1
			# FROM = {
				# is_island_region = no
				# num_owned_neighbour_states = { count < 1 owner = ROOT }
			# }
		# }
		modifier = {
			factor = 10.0
			FROM = {
				num_owned_neighbour_states = { count > 0 owner = ROOT }
			}
		}
		modifier = {
			factor = 8.0
			FROM = {
				NOT = { num_owned_neighbour_states = { count > 0 owner = ROOT } }
				num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
			}
		}
		modifier = {
			factor = 3.0
			FROM = {
				# has two neighboring states
				OR = {
					num_owned_neighbour_states = { count > 1 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
				}
				# but not more
				NOT = {
					num_owned_neighbour_states = { count > 2 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
				}
			}
		}
		modifier = {
			factor = 5.0
			FROM = {
				# has three neighboring states
				OR = {
					num_owned_neighbour_states = { count > 2 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
				}
				# but not more
				NOT = {
					num_owned_neighbour_states = { count > 3 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 3 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 2 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					}
				}
			}
		}
		modifier = {
			factor = 7.0
			FROM = {
				# has four neighboring states
				OR = {
					num_owned_neighbour_states = { count > 3 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 3 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 2 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					}
				}
				# but not more
				NOT = {
					num_owned_neighbour_states = { count > 4 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 4 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 2 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 3 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 3 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
				}
			}
		}
		modifier = {
			factor = 9.0
			FROM = {
				# has five or more neighboring states
				OR = {
					num_owned_neighbour_states = { count > 4 owner = ROOT }
					num_claimed_peace_conference_neighbour_states = { count > 4 owner = ROOT }
					AND = {
						num_owned_neighbour_states = { count > 2 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 1 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 1 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 2 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 0 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 3 owner = ROOT }
					}
					AND = {
						num_owned_neighbour_states = { count > 3 owner = ROOT }
						num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
					}
				}
			}
		}

		# give slight preference to states next to ones we've already claimed
		modifier = {
			factor = 1.1
			FROM = {
				num_claimed_peace_conference_neighbour_states = { count > 0 owner = ROOT }
			}
		}

		# prioritize states closer to capital
		modifier = {
			factor = 5.0
			capital_scope = {
				distance_to = { target = FROM value < 25 }
			}
		}
		modifier = {
			factor = 4.0
			capital_scope = {
				NOT = { distance_to = { target = FROM value < 25 } }
				distance_to = { target = FROM value < 50 }
			}
		}
		modifier = {
			factor = 3.0
			capital_scope = {
				NOT = { distance_to = { target = FROM value < 50 } }
				distance_to = { target = FROM value < 75 }
			}
		}
		modifier = {
			factor = 2.0
			capital_scope = {
				NOT = { distance_to = { target = FROM value < 75 } }
				distance_to = { target = FROM value < 100 }
			}
		}
		modifier = {
			factor = 1.5
			capital_scope = {
				NOT = { distance_to = { target = FROM value < 100 } }
				distance_to = { target = FROM value < 150 }
			}
		}
		modifier = {
			factor = 1.25
			capital_scope = {
				NOT = { distance_to = { target = FROM value < 150 } }
				distance_to = { target = FROM value < 200 }
			}
		}
		modifier = {
			factor = 0.75
			capital_scope = {
				distance_to = { target = FROM value > 300 }
			}
		}

		# prioritize more important states
		modifier = {
			factor = 0.9
			FROM = { state_and_terrain_strategic_value < 11 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 10 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 20 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 30 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 40 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 50 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 60 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 70 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 80 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 90 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 100 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 110 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 120 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 130 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 140 }
		}
		modifier = {
			factor = 1.1
			FROM = { state_and_terrain_strategic_value > 150 }
		}

		# prioritize controlled states
		modifier = {
			factor = 1.5
			FROM = { is_controlled_by = ROOT }
		}	
		
		modifier = { # The World Naval Powers get Imperial dibs on unclaimed islands
			factor = 2.5
			ROOT = {
				OR = {
					tag = ENG
					tag = FRA
					tag = JAP
					tag = USA
				}
				FROM = {
					is_island_region = yes
					state_is_unclaimed = yes
				}
			}
		}
		
		modifier = { # The Regional Naval Powers get dibs on unclaimed islands
			factor = 2
			ROOT = {
				OR = {
					tag = SOV
					tag = ITA
					tag = GER
				}
				FROM = {
					is_island_region = yes
					state_is_unclaimed = yes
				}
			}
		}
		
		modifier = { # The faction leaders get dibs on unclaimed islands
			factor = 1.5
			ROOT = {
				is_faction_leader = yes
			}
			FROM = {
				is_island_region = yes
				state_is_unclaimed = yes
			}
		}
					

		### RESTRICTIONS

		# don't take a non-neighboring state if a neighboring one is available
		modifier = {
			factor = 0.1
			rule_take_bordering_first = yes
		}

		# don't take a neighboring state if one that neighbors two of your states is available
		modifier = {
			factor = 0.1
			rule_take_double_bordering_first = yes
		}

		# take only acceptable states
		modifier = {
			factor = 0.1 # Should be 0 but having weird issues
			is_willing_to_take_state_ROOT = no
		}
	}

	# ROOT = Taker, FROM = Giver
	force_government = {
		factor = 0
	}
}

