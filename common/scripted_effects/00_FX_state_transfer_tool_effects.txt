stt_mark_all_state = {
	effect_tooltip = {
		every_state = {
			limit = {
				is_owned_by = PREV.owner
				NOT = { has_state_flag = marked_for_transfer }
			}
			custom_effect_tooltip = STT_set_mark
		}
	}
	hidden_effect = {
		owner = {
			every_owned_state = {
				limit = {
					NOT = { has_state_flag = marked_for_transfer }
				}
				set_state_flag = marked_for_transfer
				add_to_array = { ROOT.marked_states = THIS }
			}
		}
		ROOT = {
			remove_mission = stt_highlight_states
			activate_mission = stt_highlight_states
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_mark_colonial_state = {
	effect_tooltip = {
		every_state = {
			limit = {
				is_owned_by = PREV.owner
				NOT = {
					is_in_home_area = yes
					has_state_flag = marked_for_transfer
				}
			}
			custom_effect_tooltip = STT_set_mark
		}
	}
	hidden_effect = {
		owner = {
			every_owned_state = {
				limit = {
					NOT = {
						is_in_home_area = yes
						has_state_flag = marked_for_transfer
					}
				}
				set_state_flag = marked_for_transfer
				add_to_array = { ROOT.marked_states = THIS }
			}
		}
		ROOT = {
			remove_mission = stt_highlight_states
			activate_mission = stt_highlight_states
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_mark_noncore_states = {
	effect_tooltip = {
		every_state = {
			limit = {
				is_owned_by = PREV.owner
				NOT = {
					is_core_of = PREV.owner
					has_state_flag = marked_for_transfer
				}
			}
			custom_effect_tooltip = STT_set_mark
		}
	}
	hidden_effect = {
		owner = {
			every_owned_state = {
				limit = {
					NOT = {
						is_core_of = PREV
						has_state_flag = marked_for_transfer
					}
				}
				set_state_flag = marked_for_transfer
				add_to_array = { ROOT.marked_states = THIS }
			}
		}
		ROOT = {
			remove_mission = stt_highlight_states
			activate_mission = stt_highlight_states
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_clear_all_markings = {
	effect_tooltip = {
		every_state = {
			limit = { has_state_flag = marked_for_transfer }
			custom_effect_tooltip = STT_clear_mark
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			clr_state_flag = marked_for_transfer
		}
		ROOT = { remove_mission = stt_highlight_states }
	}
	clear_array = ROOT.marked_states
	clear_variable = ROOT.update_stt_gui
}
stt_award_states = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				NOT = { is_owned_by = var:PREV.owner }
			}
			var:PREV.owner = { transfer_state = PREV }
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { NOT = { is_owned_by = var:PREV.owner } }
				var:PREV.owner = { transfer_state = PREV }
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_add_cores = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				NOT = { is_core_of = var:PREV.owner }
			}
			add_core_of = var:PREV.owner
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { is_claimed_by = var:PREV.owner }
				remove_claim_by = var:PREV.owner
			}
			if = {
				limit = { NOT = { is_core_of = var:PREV.owner } }
				add_core_of = var:PREV.owner
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_remove_cores = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				is_core_of = var:PREV.owner
			}
			remove_core_of = var:PREV.owner
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { is_core_of = var:PREV.owner }
				remove_core_of = var:PREV.owner
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_add_claims = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				NOT = {
					is_core_of = var:PREV.owner
					is_claimed_by = var:PREV.owner
				}
			}
			add_claim_by = var:PREV.owner
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = {
					NOT = {
						is_core_of = var:PREV.owner
						is_claimed_by = var:PREV.owner
					}
				}
				add_claim_by = var:PREV.owner
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_remove_claims = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				is_claimed_by = var:PREV.owner
			}
			remove_claim_by = var:PREV.owner
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { is_claimed_by = var:PREV.owner }
				remove_claim_by = var:PREV.owner
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_mark_country = {
	if = {
		limit = { has_event_target = marked_country }
		custom_effect_tooltip = STT_clear_country_mark
		clear_global_event_target = marked_country
		subtract_from_variable = { ROOT.update_stt_gui = 1 }
	}
	else = {
		custom_effect_tooltip = STT_set_country_mark
		THIS = { owner = { save_global_event_target_as = marked_country } }
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
}
stt_add_puppet = {
	if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = { is_subject = no }
			THIS = {
				owner = {
					NOT = {
						tag = event_target:marked_country
						has_war_with = event_target:marked_country
					}
					is_subject = no
				}
			}
		}
		THIS = {
			owner = {
				save_global_event_target_as = to_be_overlord
			}
		}
		ROOT = { country_event = fr.political.250 }
	}
}
stt_remove_puppet = {
	if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = { is_subject = yes }
		}
		ROOT = { country_event = fr.political.251 }
	}
}
stt_add_faction = {
	if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = {
				OR = {
					is_subject = no
					THIS = {
						owner = { has_subject = event_target:marked_country }
					}
				}
			}
			THIS = {
				owner = {
					NOT = {
						tag = event_target:marked_country
						is_in_faction_with = event_target:marked_country
						has_war_with = event_target:marked_country
					}
					is_in_faction = yes
				}
			}
		}
		THIS = {
			owner = {
				save_global_event_target_as = to_be_faction_leader
			}
		}
		ROOT = { country_event = fr.political.252 }
	}
	else_if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = {
				is_in_faction = yes
				is_faction_leader = no
				is_subject = no
			}
		}
		ROOT = { country_event = fr.political.253 }
	}
}
stt_remove_faction = {
	if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = {
				is_subject = no
				is_in_faction = yes
			}
		}
		ROOT = { country_event = fr.political.254 }
	}
}
stt_add_peace = {
	if = {
		limit = {
			has_event_target = marked_country
			THIS = {
				owner = {
					has_war_with = event_target:marked_country
				}
			}
		}
		THIS = {
			owner = {
				save_global_event_target_as = peace_target
			}
		}
		ROOT = { country_event = fr.political.255 }
	}
	else_if = {
		limit = {
			has_event_target = marked_country
			event_target:marked_country = { has_war = yes }
		}
		ROOT = { country_event = fr.political.256 }
	}
}
stt_add_war = {
	if = {
		limit = {
			has_event_target = marked_country
			THIS = {
				owner = {
					event_target:marked_country = { can_declare_war_on = PREV }
				}
			}
		}
		THIS = {
			owner = { save_global_event_target_as = war_target }
		}
		ROOT = { country_event = fr.political.257 }
	}
}
stt_add_resource_rights = {
	effect_tooltip = {
		# THIS TOOK SO MUCH FUCKING TIME
		# HOPE ITS FUCKING WORTH IT
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				# NOT = { has_resources_rights = { receiver = var:FROM.owner } } # Doesn't work
			}
			OWNER = {
				FROM.OWNER = {
					PREV = {
						give_resource_rights = {
							receiver = PREV
							state = PREV.PREV.PREV
						}
					}
				}
			}
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			OWNER = { 
				FROM.OWNER = { 
					PREV = { 
						give_resource_rights = { 
							receiver = PREV 
							state = PREV.PREV.PREV 
						} 
					} 
				} 
			}
			# im a fucking genius for figuring i can use arrays
			add_to_array = {
				array = FROM.resource_rights_giver_states
			}
		}	
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
}
stt_rm_resource_rights = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				# has_resources_rights = { receiver = var:PREV.owner }
			}
			OWNER = {
				FROM.OWNER = {
					remove_resource_rights = PREV.PREV
				}
			}
		}
	}

	hidden_effect = {
		for_each_scope_loop = { # arrays can't display localisation
			array = ROOT.marked_states
			FROM.OWNER = {
				remove_resource_rights = PREV
			}
			remove_from_array = {
				array = FROM.resource_rights_giver_states
				value = THIS
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}

stt_upgrade_state_category = {
	if = {
		limit = {
			OR = {
				has_state_category = wasteland
				has_state_category = enclave
			}
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = { has_state_category = tiny_island }
		set_state_category = small_island
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = small_island
		}
		set_state_category = rural
		set_state_flag = stt_before_island # to convert to needed 
	}
	else_if = {
		limit = {
			OR = {
				has_state_category = rural
			}
		}
		set_state_category = town
	}
	else_if = {
		limit = { has_state_category = town }
		set_state_category = large_town
	}
	else_if = {
		limit = { has_state_category = large_town }
		set_state_category = city
	}
	else_if = {
		limit = { has_state_category = city }
		set_state_category = large_city
	}
	else_if = {
		limit = { has_state_category = large_city }
		set_state_category = metropolis
	}
	else_if = {
		limit = { has_state_category = metropolis }
		set_state_category = megalopolis
	}
}
stt_downgrade_state_category = {
	if = {
		limit = { has_state_category = megalopolis }
		set_state_category = metropolis
	}	
	else_if = {
		limit = { has_state_category = metropolis }
		set_state_category = large_city
	}
	else_if = {
		limit = { has_state_category = large_city }
		set_state_category = city
	}
	else_if = {
		limit = { has_state_category = city }
		set_state_category = large_town
	}
	else_if = {
		limit = { has_state_category = large_town }
		set_state_category = town
	}
	else_if = {
		limit = { has_state_category = town }
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = rural
			has_state_flag = stt_before_island
		}
		set_state_category = small_island
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = wasteland
	}
	else_if = {
		limit = {
			has_state_category = small_island
		}
		set_state_category = tiny_island
	}	
}
stt_upgrade_state_category_effect = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				NOT = { has_state_category = megalopolis }
			}
			stt_upgrade_state_category = yes
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { NOT = { has_state_category = megalopolis } }
				stt_upgrade_state_category = yes
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}
stt_downgrade_state_category_effect = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				NOT = { has_state_category = enclave }
			}
			stt_downgrade_state_category = yes
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = { NOT = { OR = { has_state_category = pastoral has_state_category = wasteland } } }
				stt_downgrade_state_category = yes
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}

stt_remilitarise_state = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				is_demilitarized_zone = yes
			}
			set_demilitarized_zone = no
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = {
					is_demilitarized_zone = yes
				}
				set_demilitarized_zone = no
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}


stt_demilitarise_state = {
	effect_tooltip = {
		every_state = {
			limit = {
				has_state_flag = marked_for_transfer
				is_demilitarized_zone = no
			}
			set_demilitarized_zone = yes
		}
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = ROOT.marked_states
			if = {
				limit = {
					is_demilitarized_zone = no
				}
				set_demilitarized_zone = yes
			}
		}
	}
	add_to_variable = { ROOT.update_stt_gui = 1 }
}